import { describe, expect, test } from 'vitest';
import read_amf0 from '../src/amf0-reader.mts';

describe('Unit Test', () => {
  test.each([
    ['Type: 0 (number)', { value: Buffer.from('00409e3c0000000000', 'hex'), expected: [1935] }],
    ['Type: 1 (boolean: true)', { value: Buffer.from('0101', 'hex'), expected: [true] }],
    ['Type: 1 (boolean: false)', { value: Buffer.from('0100', 'hex'), expected: [false] }],
    ['Type: 2 (string)', { value: Buffer.from('02000974696e792d72746d70', 'hex'), expected: ['tiny-rtmp'] }],
    ['Type: 3 (object)', { value: Buffer.from('03000009', 'hex'), expected: [{}] }],
    ['Type: 5 (null)', { value: Buffer.from('05', 'hex'), expected: [null] }],
    ['Type: 6 (undefined)', { value: Buffer.from('06', 'hex'), expected: [undefined] }],
    ['type: 8 (mixed Array)', { value: Buffer.from('0800000000000009', 'hex'), expected: [{}] }],
    ['type: 10 (strict array)', { value: Buffer.from('0a00000000', 'hex'), expected: [[]] }],
    ['type: 12 (long string)', { value: Buffer.from('0c0000000974696e792d72746d70', 'hex'), expected: ['tiny-rtmp'] }],
  ])('%s', (_, { value, expected }) => {
    expect(read_amf0(value)).toStrictEqual(expected);
  });

  test.each([
    ['Type: 4 (MovieClip)', { value: Buffer.from('04', 'hex') }],
    ['Type: 7 (Reference)', { value: Buffer.from('07', 'hex') }],
  ])('%s Throw Error', (_, { value }) => {
    expect(() => read_amf0(value)).toThrowError();
  });

  test('Type: 9 (ObjectEnd)', () => {
    const target = Buffer.from('09', 'hex');

    const result = read_amf0(target);
    expect(result).length(1);
    expect(result[0]).toBeTypeOf('symbol');
  });

  test('Type: 11 (Date)', () => {
    const target = Buffer.from('0b00000000000000000000', 'hex');

    const result = read_amf0(target);
    expect(result).length(1);
    expect(result[0]).instanceOf(Date);
    expect((result[0] as Date).getTime()).toStrictEqual(0);
  });
});

describe('Regression Test (AMF0Command)', () => {
  test('NetConnection.Connect.Success', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x66, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x02, 0x00, 0x0e, 0x46,
      0x4d, 0x53, 0x2f, 0x33, 0x2c, 0x35, 0x2c, 0x37, 0x2c, 0x37, 0x30, 0x30, 0x39, 0x00, 0x0c, 0x63,
      0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x00, 0x40, 0x3f, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x03, 0x00, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x02, 0x00, 0x1d,
      0x4e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
      0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x00, 0x0b, 0x64,
      0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x02, 0x00, 0x15, 0x43, 0x6f, 0x6e,
      0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65,
      0x64, 0x2e, 0x00, 0x04, 0x64, 0x61, 0x74, 0x61, 0x03, 0x00, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
      0x6f, 0x6e, 0x02, 0x00, 0x0a, 0x33, 0x2c, 0x35, 0x2c, 0x37, 0x2c, 0x37, 0x30, 0x30, 0x39, 0x00,
      0x00, 0x09, 0x00, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
      0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x6c, 0x65, 0x76,
      0x65, 0x6c, 0x02, 0x00, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x00, 0x09,
    ]);

    const expected = [
      '_result',
      1,
      {
        fmsVer: 'FMS/3,5,7,7009',
        capabilities: 31,
        mode: 1,
      }, {
        code: 'NetConnection.Connect.Success',
        description: 'Connection succeeded.',
        data: { version: '3,5,7,7009' },
        objectEncoding: 0,
        level: 'status',
      },
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('createStream _result', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x05, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]);

    const expected = [
      '_result',
      4,
      null,
      1,
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('NetStream.Publish.Start', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x08, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x40, 0x14, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x02, 0x00, 0x17, 0x4e,
      0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
      0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x00, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
      0x69, 0x6f, 0x6e, 0x02, 0x00, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x41, 0x63,
      0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x00, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x02, 0x00, 0x06,
      0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x00, 0x00, 0x09,
    ]);

    const expected = [
      'onStatus',
      5,
      null,
      {
        'code': 'NetStream.Publish.Start',
        'description': 'Publish Accepted',
        'level': 'status',
      },
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });
});

describe('Regression Test (FFmpeg)', () => {
  test('connect', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x61, 0x70, 0x70, 0x02, 0x00, 0x03, 0x61, 0x70, 0x70, 0x00,
      0x04, 0x74, 0x79, 0x70, 0x65, 0x02, 0x00, 0x0a, 0x6e, 0x6f, 0x6e, 0x70, 0x72, 0x69, 0x76, 0x61,
      0x74, 0x65, 0x00, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x56, 0x65, 0x72, 0x02, 0x00, 0x23, 0x46,
      0x4d, 0x4c, 0x45, 0x2f, 0x33, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
      0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4c, 0x61, 0x76, 0x66, 0x36, 0x31, 0x2e, 0x37, 0x2e, 0x31, 0x30,
      0x30, 0x29, 0x00, 0x05, 0x74, 0x63, 0x55, 0x72, 0x6c, 0x02, 0x00, 0x19, 0x72, 0x74, 0x6d, 0x70,
      0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x31, 0x39, 0x33,
      0x35, 0x2f, 0x61, 0x70, 0x70, 0x00, 0x00, 0x09,
    ]);

    const expected = [
      'connect',
      1,
      {
        app: 'app',
        type: 'nonprivate',
        flashVer: 'FMLE/3.0 (compatible; Lavf61.7.100)',
        tcUrl: 'rtmp://localhost:1935/app',
      },
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('releaseStream', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
      0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x03, 0x6b, 0x65, 0x79,
    ]);

    const expected = [
      'releaseStream',
      2,
      null,
      'key',
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('FCPublish', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x09, 0x46, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x00, 0x40, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x03, 0x6b, 0x65, 0x79,
    ]);

    const expected = [
      'FCPublish',
      3,
      null,
      'key',
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('createStream', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x00,
      0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
    ]);

    const expected = [
      'createStream',
      4,
      null,
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('publish', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x00, 0x40, 0x14, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x03, 0x6b, 0x65, 0x79, 0x02, 0x00, 0x04, 0x6c, 0x69, 0x76,
      0x65,
    ]);

    const expected = [
      'publish',
      5,
      null,
      'key',
      'live',
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('onMetadata', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x0d, 0x40, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
      0x02, 0x00, 0x0a, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x08, 0x00, 0x00,
      0x00, 0x0d, 0x00, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x00, 0x40, 0x96, 0x80,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x40, 0x90,
      0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x64, 0x61, 0x74,
      0x61, 0x72, 0x61, 0x74, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
      0x66, 0x72, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0x3d, 0xf8, 0x53, 0xe2, 0x55,
      0x6b, 0x28, 0x00, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64,
      0x00, 0x40, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f,
      0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0x5f, 0x40, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61,
      0x74, 0x65, 0x00, 0x40, 0xe7, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x75, 0x64,
      0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x40, 0x30, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x01, 0x01, 0x00,
      0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x00, 0x40, 0x24,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x02,
      0x00, 0x0c, 0x4c, 0x61, 0x76, 0x66, 0x36, 0x31, 0x2e, 0x37, 0x2e, 0x31, 0x30, 0x30, 0x00, 0x08,
      0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x09,
    ]);

    const expected = [
      '@setDataFrame',
      'onMetaData',
      {
        duration: 0,
        width: 1440,
        height: 1080,
        videodatarate: 0,
        framerate: 29.97002997002997,
        videocodecid: 7,
        audiodatarate: 125,
        audiosamplerate: 48000,
        audiosamplesize: 16,
        stereo: true,
        audiocodecid: 10,
        encoder: 'Lavf61.7.100',
        filesize: 0,
      },
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });
});

describe('Regression Test (OBS)', () => {
  test('connect', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x61, 0x70, 0x70, 0x02, 0x00, 0x03, 0x61, 0x70, 0x70, 0x00,
      0x04, 0x74, 0x79, 0x70, 0x65, 0x02, 0x00, 0x0a, 0x6e, 0x6f, 0x6e, 0x70, 0x72, 0x69, 0x76, 0x61,
      0x74, 0x65, 0x00, 0x08, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x56, 0x65, 0x72, 0x02, 0x00, 0x1f, 0x46,
      0x4d, 0x4c, 0x45, 0x2f, 0x33, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
      0x62, 0x6c, 0x65, 0x3b, 0x20, 0x46, 0x4d, 0x53, 0x63, 0x2f, 0x31, 0x2e, 0x30, 0x29, 0x00, 0x06,
      0x73, 0x77, 0x66, 0x55, 0x72, 0x6c, 0x02, 0x00, 0x19, 0x72, 0x74, 0x6d, 0x70, 0x3a, 0x2f, 0x2f,
      0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x31, 0x39, 0x33, 0x35, 0x2f, 0x61,
      0x70, 0x70, 0x00, 0x05, 0x74, 0x63, 0x55, 0x72, 0x6c, 0x02, 0x00, 0x19, 0x72, 0x74, 0x6d, 0x70,
      0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x31, 0x39, 0x33,
      0x35, 0x2f, 0x61, 0x70, 0x70, 0x00, 0x00, 0x09,
    ]);

    const expected = [
      'connect',
      1,
      {
        app: 'app',
        type: 'nonprivate',
        flashVer: 'FMLE/3.0 (compatible; FMSc/1.0)',
        swfUrl: 'rtmp://localhost:1935/app',
        tcUrl: 'rtmp://localhost:1935/app',
      },
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('releaseStream', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
      0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x03, 0x6b, 0x65, 0x79,
    ]);

    const expected = [
      'releaseStream',
      2,
      null,
      'key',
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('FCPublish', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x09, 0x46, 0x43, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x00, 0x40, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x03, 0x6b, 0x65, 0x79,
    ]);

    const expected = [
      'FCPublish',
      3,
      null,
      'key',
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('createStream', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x00,
      0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05,
    ]);

    const expected = [
      'createStream',
      4,
      null,
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('publish', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x07, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x00, 0x40, 0x14, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x03, 0x6b, 0x65, 0x79, 0x02, 0x00, 0x04, 0x6c, 0x69, 0x76,
      0x65,
    ]);

    const expected = [
      'publish',
      5,
      null,
      'key',
      'live',
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });

  test('onMetadata', () => {
    const target = Buffer.from([
      0x02, 0x00, 0x0d, 0x40, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
      0x02, 0x00, 0x0a, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x08, 0x00, 0x00,
      0x00, 0x14, 0x00, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x00,
      0x40, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
      0x00, 0x40, 0x86, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
      0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x00, 0x40, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x00,
      0x40, 0xa5, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x72,
      0x61, 0x74, 0x65, 0x00, 0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x61, 0x75,
      0x64, 0x69, 0x6f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x69, 0x64, 0x00, 0x40, 0x24, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61,
      0x74, 0x65, 0x00, 0x40, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x75, 0x64,
      0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x65, 0x00, 0x40, 0xe7, 0x70,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70,
      0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x00, 0x40, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x00, 0x40,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x01,
      0x01, 0x00, 0x03, 0x32, 0x2e, 0x31, 0x01, 0x00, 0x00, 0x03, 0x33, 0x2e, 0x31, 0x01, 0x00, 0x00,
      0x03, 0x34, 0x2e, 0x30, 0x01, 0x00, 0x00, 0x03, 0x34, 0x2e, 0x31, 0x01, 0x00, 0x00, 0x03, 0x35,
      0x2e, 0x31, 0x01, 0x00, 0x00, 0x03, 0x37, 0x2e, 0x31, 0x01, 0x00, 0x00, 0x07, 0x65, 0x6e, 0x63,
      0x6f, 0x64, 0x65, 0x72, 0x02, 0x00, 0x2f, 0x6f, 0x62, 0x73, 0x2d, 0x6f, 0x75, 0x74, 0x70, 0x75,
      0x74, 0x20, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x28, 0x6c, 0x69, 0x62, 0x6f, 0x62, 0x73,
      0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x31, 0x2e, 0x31, 0x2e, 0x30, 0x2d,
      0x62, 0x65, 0x74, 0x61, 0x32, 0x29, 0x00, 0x00, 0x09,
    ]);

    const expected = [
      '@setDataFrame',
      'onMetaData',
      {
        duration: 0,
        width: 1280,
        height: 720,
        videodatarate: 2700,
        framerate: 30,
        videocodecid: 7,
        audiodatarate: 160,
        audiosamplerate: 48000,
        audiosamplesize: 16,
        audiochannels: 2,
        stereo: true,
        audiocodecid: 10,
        '2.1': false,
        '3.1': false,
        '4.0': false,
        '4.1': false,
        '5.1': false,
        '7.1': false,
        encoder: 'obs-output module (libobs version 31.1.0-beta2)',
        fileSize: 0,
      },
    ];

    expect(read_amf0(target)).toStrictEqual(expected);
  });
});
